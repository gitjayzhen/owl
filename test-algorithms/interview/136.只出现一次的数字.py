#
# @lc app=leetcode.cn id=136 lang=python
#
# [136] 只出现一次的数字
#
# https://leetcode.cn/problems/single-number/description/
#
# algorithms
# Easy (73.26%)
# Likes:    3106
# Dislikes: 0
# Total Accepted:    1M
# Total Submissions: 1.4M
# Testcase Example:  '[2,2,1]'
#
# 给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
# 
# 你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。
# 
# 
# 
# 
# 
# 示例 1 ：
# 
# 
# 输入：nums = [2,2,1]
# 输出：1
# 
# 
# 示例 2 ：
# 
# 
# 输入：nums = [4,1,2,1,2]
# 输出：4
# 
# 
# 示例 3 ：
# 
# 
# 输入：nums = [1]
# 输出：1
# 
# 
# 
# 
# 提示：
# 
# 
# 1 <= nums.length <= 3 * 10^4
# -3 * 10^4 <= nums[i] <= 3 * 10^4
# 除了某个元素只出现一次以外，其余每个元素均出现两次。
# 
# 
# 
# 
#

# @lc code=start
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        
        7种位运算的详细特性和示例：

        与运算（AND）：
            任何数和0做与运算，结果是0，即 x & 0 = 0。例如，5（101） & 0 = 0。
            任何数和其自身做与运算，结果是自身，即 x & x = x。例如，5（101） & 5（101） = 5（101）。
        或运算（OR）：
            任何数和0做或运算，结果是自身，即 x | 0 = x。例如，5（101） | 0 = 5（101）。
            任何数和其自身做或运算，结果是自身，即 x | x = x。例如，5（101） | 5（101） = 5（101）。
        异或运算（XOR）：
            任何数和0做异或运算，结果是自身，即 x ^ 0 = x。例如，5（101） ^ 0 = 5（101）。
            任何数和其自身做异或运算，结果是0，即 x ^ x = 0。例如，5（101） ^ 5（101） = 0。
            异或运算满足交换律和结合律，即 a ^ b ^ c = a ^ (b ^ c) = (a ^ b) ^ c。例如，5（101） ^ 3（011） ^ 4（100） = 5 ^ (3 ^ 4) = (5 ^ 3) ^ 4。
        非运算（NOT）：
            非运算会反转操作数的所有位。例如，~5（101） = 2（010）。
        左移运算（SHL）：
            左移n位等于乘以2的n次方，即 x << n = x * 2^n。例如，5（101） << 2 = 20（10100）。
            左移运算不改变操作数的符号位。
        逻辑右移运算（SHR）：
            右移n位等于除以2的n次方，即 x >> n = x / 2^n。例如，20（10100） >> 2 = 5（101）。
            逻辑右移运算会用0填充移位后产生的空位。
        算术右移运算（SAR）：
            算术右移运算会用符号位填充移位后产生的空位，因此它可以保持负数的符号。例如，对于负数-5（1011） >>> 2 = -2（1110）。
            这些特性使得位运算在计算机科学和编程中有很多有趣和有用的应用。例如，我们可以用位运算来进行快速的乘法和除法运算，或者用异或运算来交换两个变量的值，等等。


        1. 异或运算满足交换律 a⊕b=b⊕a，即以上运算结果与 numsnumsnums 的元素顺序无关
        """
        result = 0
        for num in nums:
            result ^= num
        return result
# @lc code=end

